

	CHANGELOG


	Status:		done = fertig, fehlerfrei
				work = es wird dran gearbeitet, unfertig / Teilweise lauffähig 
				bug = ausführbar, aber fehlerhaft


Version	Status  	Meilenstein																		Datum		interne-Version
					
A.1		done		GUI: 3x3 großes vorgegebenes Spielfeld; 3 Minen; als Buttons					09.03.2017	A.1.1

		done		Raster auf 4x4 erweitert, Testspiel angelegt									11.03.2017	A.1.2
					GUI: Button-Klick im Spielfeld deckt Feld auf
		done		GUI: Reset-Button setzt Spielfeld zurueck; gibt Buttons frei					11.03.2017  A.1.3
					Nachricht, falls ein Minenfeld gedrueckt wurde
						Mine gedrueckt > Spielfeld-Buttons deaktiviert
		
		done		Spielstart: Spielfeld deaktiviert												12.03.2017	A.1.4
					> Spielername eingeben > Go klicken
						 (aktiviert Spielfeld, Eingabe unsichtbar,
						  Spielername(Label) sichtbar)
					Neuer Button: Neustarten. Spielername bleibt, 
								  Spielfeld auf Anfangszustand
					Reset-Button: Abgeändert, dass Spielername, Eingabe, 
								  Go-Button wieder aktiviert sind.
		
		work		Sieg-Meldung: Verbleiben die Minenfelder unaufgedeckt (ungeklickt)				12.03.2017	A.1.5
		+			und sind alle anderen Felder aufgedeckt, so kommt die Meldung, dass
		+			das Spiel gewonnen wurde. 
		+			> Spielfeld deaktiviert >> Reset oder Neustart zum weiterführen
		+
		Bug			Sieg-Erkennung: Durch mehrmaliges drücken eines Spielfeld-Button				14.03.2017  A.1.7
		^Fixed		kann fälschlicherweise Sieg erkannt werden.
					> Durch "Spielfeldgeklickt"-Variable wird nun jedes Spielfeld nur noch 1x gezählt
					
		done		Spielfeld als Mine markieren													13.03.2017  A.1.6					
		^Fixed		Bug:	Bei Rechtsklick wird kurz Markierung (*) angezeigt						14.03.2017  A.1.7
					> Ersetze "ActionListener" durch "MouseEvent" (kann sowohl Rechts- als auch
					  Linksklick erkennen)
					
					>> Ersetze alle "ActionListener" durch eigene "MouseEvent"-Routine, welche		14.03.2017	A.1.7
					   sowohl den Rechtsklick, als auch Linksklick beinhaltet

		done		Rechts-/Linksklick-Routine komplett neu erstellt								17.03.2017	A.1.8
		+			> Linkslick deckt Spielfeld auf. Danach ist der Button deaktiviert - es können
		+			  klicks mehr ausgeführt werden
		+			> Rechtsklick markiert Spielfeld als potentielle Mine
		+			> Erneuter Rechtsklick auf markiertes Spielfeld entfernt Markierung
		+			
		+			Neue Sieg-Bedingung: Das Spiel ist gewonnen, wenn alle Markieren richtig markiert sind
		+			> Anpassungen an Spielinfos: Minen markiert, Minen richtig markiert (dient nur zum Fehlerfinden)
		+
		done		Label1 und Textfield1 > passende Namen vergeben	
		
		
 => => => => Alpha-1 Status beendet. Alle Grundlegenden Elemente des Einzelspieler-Spiels entwickelt.
		     Weiter geht es, wenn die Routinen dynamisch erzeugt werden.			   
	

=== A.2.0 ===========================================================================================================

		done		Modularisierung																	17.03.2017  A.2.1
					> Buttons als Array erzeugen
					> Maus-Klick aufruf (MouseListener) in "MouseInput" ausgelagert
					> Diverse Operationen mit Schleifen realisiert
					
		done		Neue Rechts-Linksklick-Routine (aus A.1.8) - jetzt fehlerfrei					17.03.2017	A.2.2
					Neue Sieg-Bedingung (aus A.1.8) übernommen
					GUI: Neue Infos zum Spiel > Spielmodus (zZ noch 4x4)
											  > Minen markiert
											  > Minen richtig markiert (dient zu Fehlersuche, wird später entfernt)
		
		done		Reset/Neustart-Button Routine an neue Elemente angepasst						18.03.2017	A.2.3
					Spielfeld-Button Position jetzt per Schleife erzeugt
					GUI: Neue Anordnung von Spielername-Eingabe, Spielername, Spielinfos
						 > jetzt über dem Spielfeld
				         Sichtbare Versionsnummer rechts unten eingefügt
		
		done		Codeoptimierung																	19.03.2017	A.2.4
					> div. Variablen, Objektnamen geändert
					+ Methode: spielfeldAnAus(boolean) um Spielfeld zu aktivieren/deaktivieren
					+ Methode: countMinenMarkierung(int) hinzugefügt. Ersetzt frühere Methoden
						- Methode setMinenMarkierungFreigeben()
						und
						- Methode setMinenMarkiert
		
		done		+ SpielerPortrait > btn_SpielerProfil (mit Icon)								20.03.2017	A.2.5
		^done			> Klick öffnet Spielerprofil. (Derzeit noch ohne Inhalt)
					+ btn_SpielSchliessen > Beendet das Programm
					+ Spielername in btn_Spielstarten
						 > Eingabe leer: Ein Zufallsname wird generiert
						 > 1 oder 2 Zeichen: Fehlermeldung erscheint
						 > 3 oder mehr Zeichen ... Spiel startet wie gewohnt
				    > Variablen, Objekte in Test.java nach Typ geordnet
				    > Spielfeld-Buttons-Anordnung kann jetzt durch setzen der Variablen komplett
				      beeinflusst werden. Der Wert in "spalte" definiert das Layout
				      
		done	    + Neuer Button: btn_SpielNeueRunde hinzugefügt. 								20.03.2017	A.2.6
		>To-Do	    	> Derzeit noch ohne Funktion > Dauerhaft deaktiviert.
				    	> Hier kann später dann ein neues Spielfeld generiert werden
				    + Neuer Button: btn_SpielInformation hinzugefügt.
				    	> Hier wird das Spiel und seine Regeln erklärt. Derzeit noch rudimentär.
				    > Reset-Button ist zu Beginn jetzt deaktiviert. Wird erst nach "Spiel starten"
				      aktiviert.
		
		done		> Spielerprofil (ohne weiteren Inhalt) als neues Fenster als JFrame umgesetzt. 	22.03.2017	A.2.7
		
		work		+ Klasse: Spieler. (Alles zum Spieler)											23.03.2017	A.2.8
						+setSpielerName(String)
						+getSpielerName(return String)
	
		done		+ Klasse: Spiel (noch leer)														24.03.2017	A.2.9
					+ Neuer Ordner "img" für Bilddateien
					+ Neue TXT "To-Do" alles was noch zu tun ist / Ideensammlung
					
		done		> Spiel-Logik in Klasse Spiel umgezogen:										26.03.2017	A.2.10
					+ Getter & Setter für die notwendigen Variablen in Klasse Spiel erstellt
					> Variablen sprechender umbenannt: z.B. minen->restMinen; mine->minenGesamt
					+ Um von der Static-Abhängigkeit hin zu privaten Variablen zu kommen, begonnen
					  beim Umziehen die ganzen Statics zu entfernen. Um auf das richtige Objekt
					  zugreifen zu können, werden beim Setup die notwendigen Objekte übergeben.
					
					> setBounds-Logik in setBoundsSpielfeldButtons() extrahiert und					
					  benötigte Variablen in lokale Variablen der Methode umgezogen.
					> createButtons-Funktion in createSpielfeldButtons() extrahiert.
					
		done		> GUI_Spielerprofil																27.03.2017	A.2.11
						+ Diverse Labels hinzugefügt, die Inhalt aus Spieler beziehen
					> Spieler: Diverse set/get-Methoden hinzugefügt, für...
						+ spieleGespielt();
						+ spieleGewonnen();
						+ spieleGewonnenProzent();
						+ minenGefunden(int);
						+ zeitGesamtStd;		  ! noch ohne Funktion
						+ zeitSchnellstesSpiel;   ! noch ohne Funktion
						
		done		> Spieler > Spielerstatistik im Bezug auf										27.03.2017	A.2.12
						 SpieleGespielt, SpieleGewonnen, SpieleGewonnenProzent, MinenGefunden
						 implementiert.
						 > Anzeige siehe  "Spielerprofil"
						 Info: Funktioniert nur solange "Nochmal" nach Sieg/Niederlage gedrückt wird
						 	   Weil nach Reset > Spiel starten ist ein neues Spieler-Objekt erstellt
				    > Bug fixed: Nach Sieg/Niederlage-Meldung konnte weiter auf dem Spielfeld gespielt
								 bzw. geklickt werden.
		
		done		> Spieler: Methoden zur Zeiterfassung implementiert								29.03.2017	A.2.13
						+setZeitGesamt(long)
						+getZeitGesamt()
						+setZeitSchnellstesSpiel(long)
						+getZeitSchnellstesSpiel
						+setZeitLetztesSpiel(long)
						+getZeitLetztesSpiel()
						+setSpielHistorie(boolean)
						+getSpielHistorie(int)
						+set/get SpieleHistorie()
						+set/get SpielerSiegesserie
						+spielerAktualisieren(long, int, boolean)
							> Ruft alle notwendigen Mehtoden aus Spieler auf, um die Spieler-Stats zu aktualisieren
					> Test: Alle Spieler-Stats/Profilwerte werden mit spielerAktualisieren(long, int, boolean)
							aufgerufen
						  * Zeit für die aktuelle Runde wird bei Sieg- bzw. Niederlagen-Meldung angezeigt.
					> GUI_Spielerprofil: Ausgabe der GesamtZeit, Schnellstes Spiel hinzugefügt
						+ label: Siegesserie, ZeitLetztesSpiel, Spielverlauf der letzten 5 Spiele
		
		done		> Spieler: Methoden non-static gemacht. 										31.03.2017	A.2.14
							   GUI_Spielerprofil dementsprechend angepasst.
					           Unnötiger/Alter Code entfernt. Parameter umbenannt.
					           > SchnellstesSpiel zu SchnellsterSieg umbenannt
					> GUI_Spielerprofil: + btn_SpielerprofilAktualisieren: Aktualisiert im geöffneten Frame die Spielerdaten
																		   indem setLabelText() aufgerufen wird.
										 + setLabelText(): Setzt alle Labeltexte (neu)
		
		done		+ Menüleiste im "Spiel-Frame" (Test) hinzugefügt.								01.04.2017	A.2.15
						+Spiel
						  +Beenden: Schließt das Programm
						+Über
						  +Version: Gibt eine Meldung mit der aktuellen Versionsnummer
						  
=== A.3.0 ===========================================================================================================
		
		done		Geänderter Programmstart:														02.04.2017	A.3.1
						main-Methode ist immer noch in Spiel. Diese ruft zunächst GUI_Start auf.
						Dort wird nun ein Spieler erstellt und der Spielmodus gewählt.
						Danach wird spiel.setupSpiel() wie gehabt ausgeführt
					
							
					+ Class: GUI_Start: Neuer Frame, der zum Spielauswahl genutzt wird
					+ Menüleiste
					+ btn_Spielmodus: Leicht, Mittel, Schwer, Benutzer
					+ GUI_Start: btn_SpielerAnlegen, txt_SpielerName, lab_SpielerName, btn_SpielerProfil
						> SpielerName-Eingabe jetzt in GUI_Start
					- Test: btn_Beenden entfernt, da Funktion in "X" bzw. Menüleiste: Spiel > Beenden implementiert wurde
					- Text: btn_Spielstarten, txt_SpielerName nach GUI_Start verschoben
					> Test: btn_SpielReset deaktiviert, da er noch nicht an die neue Spielstruktur angepasst ist
						  
		done		> Schließen bzw. Beenden des Programms
					   Im Spielfeld (Test) und GUI_Start bewirkt das Schließen per "X", dass alle Fenster geschlossen werden
					   Dies gilt ebenso, wenn über die Menüleiste: Spiel > Beenden ausgewählt wird.
					      Anmerkung: "X" bzw. "Profil Schließen" in GUI_Spielerprofil bewirkt nur, dass dieser eine Frame (/Fenster) geschlossen wird
					+ Spiel.setSpielModus(int spalte, int zeile, int minen, String Modus)
						Setzt die Werte die für das Spielfeld benötigt werden.
						Aufruf erfolgt in GUI_Start nach Klicken des entsprechenden Spiel-Modus
	
		done		+ Klasse DataIO erstellt:														02.04.2017	A.3.2
						Die Methode .loadFile() lädt die Stats des eingegebenen Spielernamens.
						Bisher nur in der Spiel.setupSpiel(Spieler) aufgerufen.
					> Methodennamen und deren Aufrufe angepasst.
					
		done		> Test: Code optimiert und alten Code entfernt.									03.04.2017	A.3.3		
					> Im Spielfenster (Test) wird nun der gewählte Spielmodus angezeigt, d.h.		
					  (Spalten x Zeilen - Schwierigkeitsgrad) sowie die Minenanzahl.
				    + Spiel.getSpielModus(): Erzeugt für die Anzeige in Test den String mit dem gewählten Spielparametern.
					+ Neues Spielfeld erstellt: 8x8, Leicht, 10 Minen.
					  Anmerkung: Das Spiel kann derzeit nur gewonnen werden, wenn auch der korrekte Modus (=Leicht) gewählt wurde!
					  > Arrays in Test: Spielfeldgeklickt[], a_btnText[], a_btnNames[] dementsprechend erweitert.
					    Bei Test.setBoundsSpielfeldButtons() die Spaltenbreite auf 8 gesetzt
					Bug: Irgendwo ist ein Schleifenüberlauf. Ich denke weil wir einmal bei "1" Zählen und manchmal bei 0 anfangen.
					     Das muss vereinheitlicht werden. Aber das Spiel läuft korrekt.
					Bug: Spielerprofil zeigt bei Spielhistorie den alten Verlauf eines vorherigen Spielers an, wenn ein neuer Spieler angelegt wurde
					Fixed: Spiel kann nun wie vorgesehen über (Menüleiste) Spiel > Beenden geschlossen werden.
		
		done		> Test: Die Sieg/Niederlage-Meldung überarbeitet								04.04.2017	A.3.4
						Die Sieg-Niederlage-Meldung ist nun kein Dialog-Fenster mehr, sondern ein Frame, der über GUI_SpielEnde()
						in Test aufgerufen wird.
						Dementsprechend sind die Buttons ("Nochmal", "Neue Runde", "Reset") vom Spielfeld in GUI_SpielEnde verschoben worden.
						Button-Erklärung: Zurück: Schließt GUI_SpielEnde, um noch einmal das Spielfeld anzusehen
										  Nochmal: Wiederholt die aktuelle Runde
		TO-DO							  Neue Runde: Generiert ein neue Spielrunde mit gewähltem Modus 	!!! (deaktiviert)
		TO-DO							  Neues Spiel: Ruft GUI_Start aus, um einen neuen Modus zu wählen	!!! (deaktiviert)
					> Test: -btn_SpielAnleitung
							+btn_SpielNeustarten: Startet die aktuelle Runde neu.
							
		done		> GUI_Start: +GUI_modusBenutzer()												06.04.2017	A.3.5
									> Öffnet einen neuen Frame, wenn ein benutzerdefiniertes Spiel erzeugt werden soll.
									  Hier können die Spalten- und Zeilenanzahl gewählt werden. Die Minenanzahl bewegt
									  sich im Bereich [10,...,maxMinen=(spalten*zeilen)*0.2]
									+ btn_SpielZurueck: Schließt GUI_modusBenuter
									+ btn_SpielStarten: Startet ein Spiel mit den eingestellten Werten
									+ btn_SpielZufall: Erzeugt Zufallswerte für ein Spiel und zeigt diese an.
						
		done		> GUI_Start: +GUI_SpielerWahl()												  06/07.04.2017	 A.3.6
								   > Öffnet zum Programmstart einen neuen Frame, bei dem ein existierender Spieler ausgewählt
								     oder ein neuer Spieler angelegt werden kann.
								 +Bereits angelegte Spieler können aus einer Auswahlliste ausgewählt werden.
								   > Bekannte Spieler werden aus data.txt geladen:
								 		DataIO: + createSpielerList(): Erstellt Array mit Spielernamen aus data.txt
	    										+ getSpielerListe(int i): Übergibt Eintrag aus SpielerListe[i]
	    										+ returnLengthSpielerListe(): Gibt die Anzahl der angelegten Spieler zurück
	    								GUI_Start: + loadSpielerListe(): Läd die Spielernamen via DataIO aus data.txt, um sie
	    																 in der Auswahlliste auf GUI_SpielerWahl anzuzeigen


	    done		+Class > GUI_SpielerAuswahl													 08/09.04.2017  A.3.7/b
	    			+Class > GUI_SpielModusBenutzer
	    			   > Vormals in GUI_Start gewesen und nun in eigene Dateien ausgelagert
	    			+GUI_Start.aktiviereGUI_Start(): Wenn ein Spieler erstellt/gewählt wurde, aktiviere GUI für Spielmoduswahl
	    			
	    			Falls bei GUI_SpielerAuswahl Checkbox gesetzt, wird die GUI_SpielerAuswahl bei einem neuen Spiel (innerhalb
	    			einer Spielinstanz) nicht neu angezeigt.
	    			+GUI_Start.setSpielerAuswahlAnzeigen(Boolean anAus): Steuert oben genanntes Feature.
	    			>GUI_Start: Methoden ausgelagert
	    			>(GUI_)Test: Methoden ausgelagert
	    			
	    			In allen Class-Dateien refactored, Code aufgeräumt, umbenannt, 
	    			Variablen/Attribute/Methoden auf "private" gesetzt, falls möglich
	    			
	    			Das Spielerprofil wird früher geladen, d.h. es ist schon ab GUI_Start einsehbar
	    			
	    			
	    done		>DataIO: 																	 11.04.2017  A.3.8
						> neue Methoden zum Updaten der Spielerdaten in der "data.txt"-Datei
						> alle Methoden der Klasse DataIO sind nun statisch
						> bisherige Methodenaufrufe sind angepasst
						> JavaDoc bei Methoden hinzugefügt
						
		done		+Class: GUI_Spielfeld: GUI mit Spielfeld									14.04.2017	A.3.9
						Vom Aussehen her genau so wie "Test". Neu: Layoutmanager für GUI, dynamische Spielfeldgröße (Framegröße)
						Spielfeld besteht nun aus "Feldern". Anordnung per Gridlayout.
						Bezieht alle Spielfeld-Infos aus Spiel
					+Class: Feld: Feld-Element auf Spielfeld
					>Spiel: +createSpiel()
								+ initSpielfeldStatus(): Alles auf 0 (leeres Feld)
								+ setSpielfeldMinen(): Setze per Zufall Minen
								+ setSpielfeldZahlen(): Berechne für jedes Feld wie viele Minen in der Nachbarschaft sind
								+ getSpielfeldStatus(int zeile, int spalte): Gibt Info zurück, um was auf dem Feld steht
								
								Folgende Methoden waren davor in "Test": Sind noch nicht an die neue Spiellogik angepasst
					TO-DO		+ div. Variablen verschoben
					"			+ setSpielfeldgeklickt(int i, int j)
					"			+ aufSiegpruefen(boolean mineGetroffen)
					TO-DO		MouseInput mit Feldern verknpüfen
								MouseInput-Algo an veränderten Code anpassen
					
					Vorerst sind folgende Classes noch vorhanden, werden aber sobald alle TODO's abgearbeitet sind, entfernt
						TestAlpha
						Test
						TestSpielfeld
						
					Dateien entfernt:	Codeschnipsel: Inhalt in To-Do verschoben
					
		done		+Class GUI_Menubar: global einsetzbare Menüleiste							15.04.2017	A.3.10
						Alle nicht umgesetzten Funktionen sind deaktiviert.
					>addMenubar() in GUI_Start und GUI_Spielfeld
					
		done		+img/felder: Bilder für das Spielfeld hinzugefügt							17.04.2017	A.3.11
					>GUI_Spielfeld: >setSpielfeldStatusToFeld: zeigt nun nicht mehr die Zahlen aus SpielfeldStatus, sondern
								    						   ordnet dem Wert das entsprechende Bild hinzu.
								    >resetSpielfeldStatusToFeld: Setzt auf den Feldern gesetzt Bilder, Texte zurück, damit
								    							 bei einer neuen Runde keine Bilder/Texte doppelt gesetzt werden
								    Frame-Größe: Neue Formel eingefügt, die den Spielfeld-Frame an die Größe des Spielfeldes
								    			 (plus Menüleiste, Spielername etc) anpasst.
								    			 
								    			 
		done		+Class ObjectHandler: Objekte werden hier verwaltet							04.05.2017	A.3.12
		
		done		+img.felder: fahne.gif hinzugefügt											06.05.2017	A.3.13
					>GUI_Spielfeld: Spielfeld startet nun verdeckt
					>MouseInput: an Felder angepasst; div. Änderungen
					+MouseInput.setSpielfeldStatusZuFeld(x,y): Deckt geklicktes Feld auf (war vorher in GUI_Spielfeld).
					>Spiel.aufSiegpruefen an GUI_Spielfeld, Felder, ObjectHander angepasst: Funktionalität wiederhergestellt.
					>GUI_Spielfeld >GUI_SpielEnde angepasst
					+GUI_Spielfeld.setSpielfeldStatusVerdeckt: Startet das Spielfeld verdeckt.
					+GUI_Spielfeld.refreshLabels(): Methode zum aktualisieren aller Labels auf dem Spielfeld.
					+GUI_Spielfeld.resetMinenWerte(): Setzt beim Wiederholen oder neuer Runde die Werte zurück.
					>GUI_Spielfeld.spielNeueRunde / .spielNochmal(): Funktionalität wiederhergestellt.
					>GUI_SpielEnde: Buttons, Labels deklaration global, da ab zweiten Spiel die Labels sich selbst überschreiben.
					>GUI_AddMenubar: Menüeinträge Spiel / Aktuelles Spiel / "Nochmal spielen" und "neue Runde" funktionieren jetzt.
					>GUI_Spielerwahl: Die Liste mit den Spielernanem, welche aus data.txt geladen werden, ist nun nur noch so groß
									  wie die Anzahl der Spieler (keine leeren Einträge mehr).
									  Dazu wurde in DataIO folgendes geändert...
									  DataIO.createSpielerList(): ruft zaehlerSpieler() auf, passt dann Arraygröße an, dann
									  							  werden erst die Spielernamen kopiert.
									  DataIO.zaehleSpieler(): Zählt zunächst einmal wie viele Spieler angelegt sind und gibt 
									  						  diesen Wert zurück.
					>Spiel.zeitMessungStart(): Startet die Zeitmessung, in dem saveAktuelleZeit() aufgerufen wird.
											   Wird immer dann aufgerufen, wenn eine neue Runde bzw. die Runde wiederholt wird
					+Spiel.saveAktuelleZeit(): Funktionalität was früher zeitMessungStart war, da die Methode aber die Zeit zurückgibt, 
											   war sie als (externer) Methodenaufruf zur Zeitmessung ungeeignet.
					+Spiel.initspielfeldGeklickt(): Setzt das Array mit den protokollierten Mausklicks zurück.
					
		done		Spielerdaten werden bei Spielende gespeichert								07.05.2017	A.3.14
		
		done		Alle GUI-Fenster werden nun zentriert-mittig geöffnet						08.05.2017	A.3.15
					Neu angelegte Spieler werden nun auch gespeichert
					Die Spielhistorie wird nun gespeichert bzw. wird geladen
						"Spieler" bekommt ein neues Attribut -> spielfolge <- welches als String in Zahlenform die Spielhistorie
							speichert. zB spielfolge=10002 bedeutet ===> "Sieg" / "Niederlage" / "Niederlage" / "Niederlage" / "-"
						Spieler:	+public setSpielHistorieFromDataIO(Integer spielfolge): spielfolge wird vom Spielerobjekt übergeben und
																						 	anschließend Zeichen für Zeichen den Strings
																							 "Sieg" oder "Niederlage" oder "-" im 
																					 		Spieler.spielHistorie[] zugeorndet
									+public String getSpielfolge(): liest Spieler.SpielHistorie[] Stelle für Stelle aus und erzeugt
																	einen String (wie oben beschrieben)	und gibt es als spielfolge zurück
						DataIO: >loadSpieler(Spieler spieler, String data): liest nun dataArray[8] aus, welches die Spielhistorie beinhaltet
								>fetchSpielerData(Spieler spieler): um spieler.getSpielfolge() erweitert
								
		donw		>DataIO: Spieler-Siegesserie funktioniert nun wie vorgesehen				09.05.2017	A.3.16
					>DataIO: Spieler-MaxSiegesserie an den entsprechenden Stellen hinzugefügt
					>data.txt: Spielerstatistiken zurückgesetzt, da neue Felder hinzugefügt
					+Spieler: Attribut "spielerMaxSiegesserie" hinzugefügt
						+getMaxSiegesserie(): gibt aktuellen Wert von spielerMaxSiegesserie zurück
						+setMaxSiegesserieFromData(): liest aus Data.txt den Wert aus und speichert es in spielerMaxSiegesserie
						+ueberpruefeMaxSiegesserie(): speichert einen neuen Wert für spielerMaxSiegesserie, sofern die aktuelle Siegesserie höher ist.
													  Die Methode wird nach setzen der aktuallen Siegesserie aufgerufen.
					>GUI_Spielerprofil: Label für spielerMaxSiegesserie hinzugefügt und ggf. andere Stellen dafür angepasst
					>GUI_AddMenubar: Spieler > Spielerprofil aktiviert und implementiert
		
		
								
		TO-DO		Wenn "Neues Spiel" gewählt wird und ein neues Spiel erstellt wird, dann existiert GUI_Spielfeld doppelt und das 
					Spielfeld ist nur eine Zeile lang
								
								
								
								
	